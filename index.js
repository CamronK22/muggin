#!/usr/bin/env node

const fs = require("fs")
const readline = require("readline")
const { exit } = require("process")

const pug = require("pug")

async function compile(filename) {
    const inputFileStream = fs.createReadStream(filename)
    const rl = readline.createInterface({
        input: inputFileStream,
        crlfDelay: Number.MAX_VALUE
    })

    var pugString = "// Generated by Muggin (camronk22.com)\n"
    var ignoreBrackets = true
    var ignoreIndentLevel = Number.MAX_VALUE

    // every line
    for await (const line of rl) {
        // discard empty lines to avoid confusing the indent counter
        if (!/\S/.test(line)) {
            continue
        }

        var currentIndent = 0
        var countIndents = true

        // iterate every character
        var protoline = ""
        for (var i = 0; i < line.length; i++) {
            // store indent level in currentIndent
            if (/\s/.test(line[i]) && countIndents) {
                currentIndent++
            } else {
                countIndents = false
            }
            protoline += line[i]
        }

        // begin ignoring brackets if necessary
        if (currentIndent <= ignoreIndentLevel && !ignoreBrackets) {
            ignoreBrackets = true
            ignoreIndentLevel = Number.MAX_VALUE
        }

        // stop ignoring brackets when line contains ~>
        if (protoline.includes("~>") && ignoreBrackets) {
            protoline = protoline.replace(" ~>", ".")
            protoline = protoline.replace(/{/g, "")
            protoline = protoline.replace(/}/g, "")
            ignoreBrackets = false
            ignoreIndentLevel = currentIndent
        }

        // filter brackets
        if (ignoreBrackets) {
            protoline = protoline.replace(/{/g, "")
            protoline = protoline.replace(/}/g, "")
        }

        // finally, append protoline to pugString
        pugString += protoline + "\n"
        //console.log(protoline)
    }

    // compile pugstring -> html
    var fn = pug.compile(pugString)
    fs.writeFile(filename.split('.')[0]+".html", fn().toString(), (err) => {
        if (err) console.log(err)
    })
    
    //console.log(pugString)
}

// process every argument as filename
const args = process.argv.slice(2)
let somethingToDo = false
args.forEach(arg => {
    somethingToDo = true
    compile(arg)
})

if (!somethingToDo) {
    console.error("Usage: muggin [inputfile.mug] [anotherfile.mug]")
    exit(1)
}